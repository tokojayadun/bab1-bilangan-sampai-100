"use client";

import { useState } from "react";
import { Loader2 } from "lucide-react";

import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";

type QuizQuestion = {
  question: string;
  answer: string;
  explanation: string;
};

type FeedbackState =
  | { status: "success"; message: string }
  | { status: "error"; message: string }
  | null;

type GameStatus = "idle" | "loading" | "quiz" | "finished";

const systemPrompt = `Anda adalah Kak AI, guru kelas 2 SD yang sangat ceria, sabar, dan selalu memberi pujian positif. Kamu selalu menulis soal dengan format yang jelas: \`Pertanyaan | Jawaban | Penjelasan singkat\` tanpa catatan tambahan.`;
const userPrompt = 
`Buatkan 5 soal kuis UNIK dan BERBEDA untuk siswa kelas 2 SD (usia 7-8 tahun) tentang materi "Bilangan sampai 100".
Setiap soal harus mencakup salah satu dari topik ini:
1.  Membilang benda (contoh: "Ada 3 ikat pensil, setiap ikat berisi 10 pensil. Ada juga 4 pensil lepas. Berapa total semua pensil?")
2.  Nilai Tempat (contoh: "Pada bilangan 82, angka 8 menempati nilai tempat apa?")
3.  Membandingkan bilangan (contoh: "Mana yang lebih besar, 69 atau 96?")
4.  Mengurutkan bilangan (contoh: "Urutkan bilangan berikut dari yang terkecil: 34, 17, 56, 21.")
5.  Bilangan Genap atau Ganjil (contoh: "Apakah bilangan 47 itu genap atau ganjil?")

SANGAT PENTING: Jangan membuat soal matematika sederhana seperti '5 + 3 = ?'. Buatlah soal cerita atau soal konseptual.
Jangan ulangi soal yang sudah pernah dibuat.
Format setiap soal di baris baru persis seperti ini: Teks Pertanyaan | Jawaban Singkat | Penjelasan singkat dan ceria untuk anak-anak.
`;




function parseQuizResponse(answer: string): QuizQuestion[] {
  const cleanedAnswer = answer.replace(/
/g, "
").trim();
  const parsed: QuizQuestion[] = [];
  const seenQuestions = new Set<string>();

  const pushIfValid = (rawQuestion: string, rawAnswer: string, rawExplanation: string) => {
    const cleanQuestion = rawQuestion.replace(/^[-*d.s]+/, "").trim();
    const cleanAnswer = rawAnswer.replace(/^[-*d.s]+/, "").trim();
    const cleanExplanation = rawExplanation.trim();

    if (!cleanQuestion || !cleanAnswer) {
      return;
    }

    const key = cleanQuestion.toLowerCase();
    if (seenQuestions.has(key)) {
      return;
    }

    seenQuestions.add(key);
    parsed.push({
      question: cleanQuestion,
      answer: cleanAnswer,
      explanation: cleanExplanation,
    });
  };

  const tryParseLine = (line: string) => {
    const strippedLine = line.replace(/^[d]+[).-s]*|^[-*]s*/, "").trim();
    if (!strippedLine) {
      return;
    }

    if (strippedLine.includes("|")) {
      const parts = strippedLine.split("|").map((segment) => segment.trim());
      if (parts.length >= 2) {
        const [question, answerPart, ...rest] = parts;
        pushIfValid(question, answerPart, rest.join(" | "));
      }
      return;
    }

    const regexMatch = strippedLine.match(/Pertanyaan[^:]*:(.*?)(?:Jawaban[^:]*:(.*?))(?:Penjelasan[^:]*:(.*))?$/i);
    if (regexMatch) {
      pushIfValid(regexMatch[1] ?? "", regexMatch[2] ?? "", regexMatch[3] ?? "");
    }
  };

  cleanedAnswer
    .split(/
+/)
    .map((line) => line.trim())
    .filter(Boolean)
    .forEach((line) => {
      if (parsed.length < 5) {
        tryParseLine(line);
      }
    });

  if (parsed.length < 5) {
    cleanedAnswer
      .split(/
{2,}/)
      .map((block) => block.trim())
      .filter(Boolean)
      .forEach((block) => {
        if (parsed.length >= 5) {
          return;
        }

        if (block.includes("|")) {
          const parts = block.split("|").map((segment) => segment.trim());
          if (parts.length >= 2) {
            const [question, answerPart, ...rest] = parts;
            pushIfValid(question, answerPart, rest.join(" | "));
            return;
          }
        }

        const regexMatch = block.match(/Pertanyaan[^:]*:(.*?)(?:Jawaban[^:]*:(.*?))(?:Penjelasan[^:]*:(.*))?/is);
        if (regexMatch) {
          pushIfValid(regexMatch[1] ?? "", regexMatch[2] ?? "", regexMatch[3] ?? "");
        }
      });
  }

  if (parsed.length < 5) {
    const globalMatches = cleanedAnswer.match(/([^
]+|[^
]+|[^
]+)/g);
    if (globalMatches) {
      globalMatches.forEach((match) => {
        if (parsed.length >= 5) {
          return;
        }
        const parts = match.split("|").map((segment) => segment.trim());
        const [question, answerPart, ...rest] = parts;
        pushIfValid(question ?? "", answerPart ?? "", rest.join(" | "));
      });
    }
  }

  if (parsed.length < 5) {
    const colonRegex = /Pertanyaan[^:]*:s*([sS]*?)(?:Jawaban[^:]*:s*([sS]*?))(?:Penjelasan[^:]*:s*([sS]*?))?(?=
{2,}|$)/gi;
    let match: RegExpExecArray | null;
    while ((match = colonRegex.exec(cleanedAnswer)) && parsed.length < 5) {
      pushIfValid(match[1] ?? "", match[2] ?? "", match[3] ?? "");
    }
  }

  return parsed.slice(0, 5);
}



function normaliseAnswer(value: string) {
  return value.trim().toLowerCase();
}

const QuizMasterAI = () => {
  const [status, setStatus] = useState<GameStatus>("idle");
  const [questions, setQuestions] = useState<QuizQuestion[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [userAnswer, setUserAnswer] = useState("");
  const [feedback, setFeedback] = useState<FeedbackState>(null);
  const [score, setScore] = useState(0);
  const [hasAnswered, setHasAnswered] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  const currentQuestion = questions[currentIndex];

  const resetQuiz = () => {
    setStatus("idle");
    setQuestions([]);
    setCurrentIndex(0);
    setUserAnswer("");
    setFeedback(null);
    setScore(0);
    setHasAnswered(false);
    setErrorMessage(null);
  };

  const startQuiz = async () => {
    setStatus("loading");
    setErrorMessage(null);
    setFeedback(null);
    setHasAnswered(false);

    try {
      const response = await fetch("/api/groq", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ systemPrompt, userPrompt }),
      });

      if (!response.ok) {
        throw new Error(`Request failed with status ${response.status}`);
      }

      const data = (await response.json()) as { answer?: string };
      const parsedQuestions = parseQuizResponse(data.answer ?? "");

      if (!parsedQuestions.length) {
        throw new Error("Tidak ada soal yang dapat diproses.");
      }

      setQuestions(parsedQuestions);
      setCurrentIndex(0);
      setUserAnswer("");
      setFeedback(null);
      setScore(0);
      setHasAnswered(false);
      setStatus("quiz");
    } catch (error) {
      console.error("Failed to start quiz:", error);
      setErrorMessage(
        error instanceof Error ? error.message : "Terjadi kesalahan saat memulai kuis."
      );
      setStatus("idle");
    }
  };

  const handleCheckAnswer = () => {
    if (!currentQuestion || hasAnswered) {
      return;
    }

    if (!userAnswer.trim()) {
      setFeedback({ status: "error", message: "Isi jawabanmu dulu, ya!" });
      return;
    }

    const isCorrect =
      normaliseAnswer(userAnswer) === normaliseAnswer(currentQuestion.answer);

    if (isCorrect) {
      setScore((previous) => previous + 1);
      setFeedback({
        status: "success",
        message: `Hebat! ${currentQuestion.explanation || "Jawabanmu sudah tepat."}`,
      });
    } else {
      setFeedback({
        status: "error",
        message: `Jawaban yang benar: ${currentQuestion.answer}. ${
          currentQuestion.explanation || "Coba pahami lagi penjelasannya, ya!"
        }`,
      });
    }

    setHasAnswered(true);
  };

  const goToNextQuestion = () => {
    if (currentIndex + 1 >= questions.length) {
      setStatus("finished");
      return;
    }

    setCurrentIndex((previous) => previous + 1);
    setUserAnswer("");
    setFeedback(null);
    setHasAnswered(false);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Kuis JAGO Bab 1</CardTitle>
        <CardDescription>
          Tantang dirimu dengan soal-soal yang dibuat Kak AI untuk materi Bilangan
          sampai 100.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {status === "idle" && (
          <div className="space-y-4">
            {errorMessage ? (
              <Alert variant="destructive">
                <AlertTitle>Wah, ada yang salah!</AlertTitle>
                <AlertDescription>{errorMessage}</AlertDescription>
              </Alert>
            ) : null}
            <p className="text-sm text-muted-foreground">
              Siap untuk belajar sambil bermain? Tekan tombol di bawah untuk
              memulai kuisnya!
            </p>
            <Button onClick={startQuiz}>Mulai Kuis!</Button>
          </div>
        )}

        {status === "loading" && (
          <div className="flex flex-col items-center justify-center gap-3 py-8 text-center">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
            <p className="text-sm text-muted-foreground">
              Kak AI sedang menyiapkan soal spesial untukmuï¿½
            </p>
          </div>
        )}

        {status === "quiz" && currentQuestion && (
          <div className="space-y-4">
            <div>
              <p className="text-xs uppercase tracking-wide text-muted-foreground">
                Soal {currentIndex + 1} dari {questions.length}
              </p>
              <p className="mt-2 text-lg font-semibold text-foreground">
                {currentQuestion.question}
              </p>
            </div>
            <div className="space-y-2">
              <label htmlFor="quiz-answer" className="text-sm font-medium">
                Jawabanmu
              </label>
              <Input
                id="quiz-answer"
                value={userAnswer}
                onChange={(event) => setUserAnswer(event.target.value)}
                placeholder="Tulis jawaban di sini"
                disabled={hasAnswered}
              />
            </div>
            <div className="flex flex-wrap gap-3">
              <Button onClick={handleCheckAnswer} disabled={hasAnswered}>
                Periksa
              </Button>
              <Button
                variant="outline"
                onClick={goToNextQuestion}
                disabled={!hasAnswered}
              >
                Lanjut
              </Button>
            </div>

            {feedback ? (
              <Alert
                variant={feedback.status === "success" ? "default" : "destructive"}
              >
                <AlertTitle>
                  {feedback.status === "success" ? "Mantap!" : "Belum Tepat"}
                </AlertTitle>
                <AlertDescription>{feedback.message}</AlertDescription>
              </Alert>
            ) : null}
          </div>
        )}

        {status === "finished" && (
          <div className="space-y-4 text-center">
            <p className="text-xl font-semibold text-foreground">
              Hebat! Skor kamu: {score}/{questions.length}
            </p>
            <p className="text-sm text-muted-foreground">
              Terus latihan agar semakin mahir berhitung, ya!
            </p>
          </div>
        )}
      </CardContent>
      <CardFooter className="flex justify-end">
        {status === "finished" ? (
          <Button onClick={resetQuiz}>Main Lagi</Button>
        ) : null}
        {status === "idle" ? null : status === "quiz" ? null : status === "loading" ? null : (
          <Button variant="outline" onClick={resetQuiz}>
            Batalkan
          </Button>
        )}
      </CardFooter>
    </Card>
  );
};

export default QuizMasterAI;


